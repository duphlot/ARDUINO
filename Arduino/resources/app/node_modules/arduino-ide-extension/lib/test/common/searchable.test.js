"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const uri_1 = require("@theia/core/lib/common/uri");
const chai_1 = require("chai");
const protocol_1 = require("../../common/protocol");
describe('searchable', () => {
    describe('parse', () => {
        describe(protocol_1.BoardSearch.UriParser.authority, () => {
            [
                {
                    uri: 'http://boardsmanager#SAMD',
                    expected: { query: 'SAMD', type: 'All' },
                },
                {
                    uri: 'http://boardsmanager/Arduino%40Heart#littleBits',
                    expected: { query: 'littleBits', type: 'Arduino@Heart' },
                },
                {
                    uri: 'http://boardsmanager/too/many/segments#invalidPath',
                    expected: undefined,
                },
                {
                    uri: 'http://boardsmanager/random#invalidPath',
                    expected: undefined,
                },
                {
                    uri: 'https://boardsmanager/#invalidScheme',
                    expected: `Invalid 'scheme'. Expected 'http'. URI was: https://boardsmanager/#invalidScheme.`,
                },
                {
                    uri: 'http://librarymanager/#invalidAuthority',
                    expected: `Invalid 'authority'. Expected: 'boardsmanager'. URI was: http://librarymanager/#invalidAuthority.`,
                },
            ].map((expectation) => toIt(expectation, protocol_1.BoardSearch.UriParser.parse));
        });
        describe(protocol_1.LibrarySearch.UriParser.authority, () => {
            [
                {
                    uri: 'http://librarymanager#WiFiNINA',
                    expected: { query: 'WiFiNINA', type: 'All', topic: 'All' },
                },
                {
                    uri: 'http://librarymanager/All/Device%20Control#Servo',
                    expected: {
                        query: 'Servo',
                        type: 'All',
                        topic: 'Device Control',
                    },
                },
                {
                    uri: 'http://librarymanager/All/Display#SparkFun',
                    expected: {
                        query: 'SparkFun',
                        type: 'All',
                        topic: 'Display',
                    },
                },
                {
                    uri: 'http://librarymanager/Updatable/Display#SparkFun',
                    expected: {
                        query: 'SparkFun',
                        type: 'Updatable',
                        topic: 'Display',
                    },
                },
                {
                    uri: 'http://librarymanager/All/Signal%20Input%2FOutput#debouncer',
                    expected: {
                        query: 'debouncer',
                        type: 'All',
                        topic: 'Signal Input/Output',
                    },
                },
                {
                    uri: 'http://librarymanager/too/many/segments#invalidPath',
                    expected: undefined,
                },
                {
                    uri: 'http://librarymanager/absent/invalid#invalidPath',
                    expected: undefined,
                },
                {
                    uri: 'https://librarymanager/#invalidScheme',
                    expected: `Invalid 'scheme'. Expected 'http'. URI was: https://librarymanager/#invalidScheme.`,
                },
                {
                    uri: 'http://boardsmanager/#invalidAuthority',
                    expected: `Invalid 'authority'. Expected: 'librarymanager'. URI was: http://boardsmanager/#invalidAuthority.`,
                },
            ].map((expectation) => toIt(expectation, protocol_1.LibrarySearch.UriParser.parse));
        });
    });
});
function toIt({ uri, expected }, run) {
    return it(`should ${typeof expected === 'string'
        ? `fail to parse '${uri}'`
        : !expected
            ? `not parse '${uri}'`
            : `parse '${uri}' to ${JSON.stringify(expected)}`}`, () => {
        if (typeof expected === 'string') {
            try {
                run(new uri_1.default(uri));
                chai_1.expect.fail(`Expected an error with message '${expected}' when parsing URI: ${uri}.`);
            }
            catch (err) {
                (0, chai_1.expect)(err).to.be.instanceOf(Error);
                (0, chai_1.expect)(err.message).to.be.equal(expected);
            }
        }
        else {
            const actual = run(new uri_1.default(uri));
            if (!expected) {
                (0, chai_1.expect)(actual).to.be.undefined;
            }
            else {
                (0, chai_1.expect)(actual).to.be.deep.equal(expected, `Was: ${JSON.stringify(actual)}`);
            }
        }
    });
}
//# sourceMappingURL=searchable.test.js.map