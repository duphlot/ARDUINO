"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArduinoLocalizationContribution = void 0;
const inversify_1 = require("@theia/core/shared/inversify");
const path_1 = require("path");
let ArduinoLocalizationContribution = class ArduinoLocalizationContribution {
    constructor() {
        // 0. index: locale
        // 1. index: optional JSON file to `require` (if differs from the locale)
        // If you touch the locales, please keep the alphabetical order. Also in the `package.json` for the VS Code language packs. Thank you! ❤️
        // Note that IDE2 has more translations than available VS Code language packs. (https://github.com/arduino/arduino-ide/issues/1447)
        this.locales = [
            ['bg'],
            ['cs'],
            ['de'],
            ['es'],
            ['fr'],
            ['hu'],
            // ['id'], Does not have Transifex translations, but has a VS Code language pack available on Open VSX.
            ['it'],
            ['ja'],
            ['ko'],
            ['nl'],
            ['pl'],
            ['pt-br', 'pt'],
            ['ru'],
            ['tr'],
            ['uk', 'uk_UA'],
            ['zh-cn', 'zh'],
        ];
    }
    async registerLocalizations(registry) {
        for (const [locale, jsonFilename] of this.locales) {
            registry.registerLocalizationFromRequire(locale, require((0, path_1.join)(__dirname, `../../../build/i18n/${jsonFilename !== null && jsonFilename !== void 0 ? jsonFilename : locale}.json`)));
        }
    }
};
ArduinoLocalizationContribution = __decorate([
    (0, inversify_1.injectable)()
], ArduinoLocalizationContribution);
exports.ArduinoLocalizationContribution = ArduinoLocalizationContribution;
//# sourceMappingURL=arduino-localization-contribution.js.map