"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SurveyNotificationServiceImpl = void 0;
const inversify_1 = require("@theia/core/shared/inversify");
/**
 * Service for checking if it is the first instance of the IDE, in this case it sets a flag to true.
 * This flag is used to prevent the survey notification from being visible in every open window. It must only be shown on one window.
 */
let SurveyNotificationServiceImpl = class SurveyNotificationServiceImpl {
    constructor() {
        this.surveyDidShow = false;
    }
    async isFirstInstance() {
        if (this.surveyDidShow) {
            return false;
        }
        this.surveyDidShow = true;
        return this.surveyDidShow;
    }
};
SurveyNotificationServiceImpl = __decorate([
    (0, inversify_1.injectable)()
], SurveyNotificationServiceImpl);
exports.SurveyNotificationServiceImpl = SurveyNotificationServiceImpl;
//# sourceMappingURL=survey-service-impl.js.map