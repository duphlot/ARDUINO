"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("@theia/core/shared/react");
const classnames_1 = require("classnames");
const SettingsStepInput = (props) => {
    const { initialValue, setSettingsStateValue, step, maxValue, minValue, unitOfMeasure, classNames, } = props;
    const [valueState, setValueState] = React.useState({
        currentValue: initialValue,
        isEmptyString: false,
    });
    const { currentValue, isEmptyString } = valueState;
    const clamp = (value, min, max) => {
        return Math.min(Math.max(value, min), max);
    };
    const resetToInitialState = () => {
        setValueState({
            currentValue: initialValue,
            isEmptyString: false,
        });
    };
    const onStep = (roundingOperation, stepOperation) => {
        const valueRoundedToScale = Math[roundingOperation](currentValue / step) * step;
        const calculatedValue = valueRoundedToScale === currentValue
            ? stepOperation(currentValue, step)
            : valueRoundedToScale;
        const newValue = clamp(calculatedValue, minValue, maxValue);
        setSettingsStateValue(newValue);
    };
    const onStepUp = () => {
        onStep('ceil', (a, b) => a + b);
    };
    const onStepDown = () => {
        onStep('floor', (a, b) => a - b);
    };
    const onUserInput = (event) => {
        const { value: eventValue } = event.target;
        setValueState({
            currentValue: Number(eventValue),
            isEmptyString: eventValue === '',
        });
    };
    /* Prevent the user from entering invalid values */
    const onBlur = (event) => {
        if ((currentValue === initialValue && !isEmptyString) ||
            event.currentTarget.contains(event.relatedTarget)) {
            return;
        }
        const clampedValue = clamp(currentValue, minValue, maxValue);
        if (clampedValue === initialValue || isNaN(currentValue) || isEmptyString) {
            resetToInitialState();
            return;
        }
        setSettingsStateValue(clampedValue);
    };
    const valueIsNotWithinRange = currentValue < minValue || currentValue > maxValue;
    const isDisabledException = valueIsNotWithinRange || isEmptyString || isNaN(currentValue);
    const upDisabled = isDisabledException || currentValue >= maxValue;
    const downDisabled = isDisabledException || currentValue <= minValue;
    return (React.createElement("div", { className: "settings-step-input-container", onBlur: onBlur },
        React.createElement("input", { className: (0, classnames_1.default)('settings-step-input-element', classNames === null || classNames === void 0 ? void 0 : classNames.input), value: isEmptyString ? '' : String(currentValue), onChange: onUserInput, type: "number", pattern: "[0-9]+" }),
        React.createElement("div", { className: (0, classnames_1.default)('settings-step-input-buttons-container', classNames === null || classNames === void 0 ? void 0 : classNames.buttonsContainer) },
            React.createElement("button", { className: "settings-step-input-button settings-step-input-up-button", disabled: upDisabled, onClick: onStepUp }, "\u25BE"),
            React.createElement("button", { className: "settings-step-input-button", disabled: downDisabled, onClick: onStepDown }, "\u25BE")),
        unitOfMeasure && `${unitOfMeasure}`));
};
exports.default = SettingsStepInput;
//# sourceMappingURL=settings-step-input.js.map