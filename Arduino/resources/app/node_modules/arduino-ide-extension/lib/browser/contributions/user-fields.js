"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserFields = void 0;
const inversify_1 = require("@theia/core/shared/inversify");
const common_1 = require("@theia/core/lib/common");
const protocol_1 = require("../../common/protocol");
const boards_service_provider_1 = require("../boards/boards-service-provider");
const user_fields_dialog_1 = require("../dialogs/user-fields/user-fields-dialog");
const arduino_menus_1 = require("../menu/arduino-menus");
const contribution_1 = require("./contribution");
const upload_sketch_1 = require("./upload-sketch");
let UserFields = class UserFields extends contribution_1.Contribution {
    constructor() {
        super(...arguments);
        this.boardRequiresUserFields = false;
        this.userFieldsSet = false;
        this.cachedUserFields = new Map();
        this.menuActionsDisposables = new common_1.DisposableCollection();
    }
    init() {
        super.init();
        this.boardsServiceProvider.onBoardsConfigChanged(async () => {
            const userFields = await this.boardsServiceProvider.selectedBoardUserFields();
            this.boardRequiresUserFields = userFields.length > 0;
            this.registerMenus(this.menuRegistry);
        });
    }
    registerMenus(registry) {
        this.menuActionsDisposables.dispose();
        if (this.boardRequiresUserFields) {
            this.menuActionsDisposables.push(registry.registerMenuAction(arduino_menus_1.ArduinoMenus.SKETCH__MAIN_GROUP, {
                commandId: upload_sketch_1.UploadSketch.Commands.UPLOAD_WITH_CONFIGURATION.id,
                label: upload_sketch_1.UploadSketch.Commands.UPLOAD_WITH_CONFIGURATION.label,
                order: '2',
            }));
        }
        else {
            this.menuActionsDisposables.push(registry.registerMenuNode(arduino_menus_1.ArduinoMenus.SKETCH__MAIN_GROUP, new arduino_menus_1.PlaceholderMenuNode(arduino_menus_1.ArduinoMenus.SKETCH__MAIN_GROUP, 
            // commandId: UploadSketch.Commands.UPLOAD_WITH_CONFIGURATION.id,
            upload_sketch_1.UploadSketch.Commands.UPLOAD_WITH_CONFIGURATION.label, { order: '2' })));
        }
    }
    selectedFqbnAddress() {
        var _a, _b, _c, _d;
        const { boardsConfig } = this.boardsServiceProvider;
        const fqbn = (_a = boardsConfig.selectedBoard) === null || _a === void 0 ? void 0 : _a.fqbn;
        if (!fqbn) {
            return undefined;
        }
        const address = ((_c = (_b = boardsConfig.selectedBoard) === null || _b === void 0 ? void 0 : _b.port) === null || _c === void 0 ? void 0 : _c.address) ||
            ((_d = boardsConfig.selectedPort) === null || _d === void 0 ? void 0 : _d.address) ||
            '';
        return fqbn + '|' + address;
    }
    async showUserFieldsDialog(key) {
        const cached = this.cachedUserFields.get(key);
        // Deep clone the array of board fields to avoid editing the cached ones
        this.userFieldsDialog.value = cached
            ? cached.slice()
            : await this.boardsServiceProvider.selectedBoardUserFields();
        const result = await this.userFieldsDialog.open();
        if (!result) {
            return;
        }
        this.userFieldsSet = true;
        this.cachedUserFields.set(key, result);
        return result;
    }
    async checkUserFieldsDialog(forceOpen = false) {
        const key = this.selectedFqbnAddress();
        if (!key) {
            return false;
        }
        /*
          If the board requires to be configured with user fields, we want
          to show the user fields dialog, but only if they weren't already
          filled in or if they were filled in, but the previous upload failed.
        */
        if (!forceOpen &&
            (!this.boardRequiresUserFields ||
                (this.cachedUserFields.has(key) && this.userFieldsSet))) {
            return true;
        }
        const userFieldsFilledIn = Boolean(await this.showUserFieldsDialog(key));
        return userFieldsFilledIn;
    }
    checkUserFieldsForUpload() {
        // TODO: This does not belong here.
        // IDE2 should not do any preliminary checks but let the CLI fail and then toast a user consumable error message.
        if (!this.boardRequiresUserFields || this.getUserFields().length > 0) {
            this.userFieldsSet = true;
            return true;
        }
        this.messageService.error(common_1.nls.localize('arduino/sketch/userFieldsNotFoundError', "Can't find user fields for connected board"));
        this.userFieldsSet = false;
        return false;
    }
    getUserFields() {
        var _a;
        const fqbnAddress = this.selectedFqbnAddress();
        if (!fqbnAddress) {
            return [];
        }
        return (_a = this.cachedUserFields.get(fqbnAddress)) !== null && _a !== void 0 ? _a : [];
    }
    isRequired() {
        return this.boardRequiresUserFields;
    }
    notifyFailedWithError(e) {
        if (this.boardRequiresUserFields && protocol_1.CoreError.UploadFailed.is(e)) {
            this.userFieldsSet = false;
        }
    }
};
__decorate([
    (0, inversify_1.inject)(user_fields_dialog_1.UserFieldsDialog),
    __metadata("design:type", user_fields_dialog_1.UserFieldsDialog)
], UserFields.prototype, "userFieldsDialog", void 0);
__decorate([
    (0, inversify_1.inject)(boards_service_provider_1.BoardsServiceProvider),
    __metadata("design:type", boards_service_provider_1.BoardsServiceProvider)
], UserFields.prototype, "boardsServiceProvider", void 0);
__decorate([
    (0, inversify_1.inject)(contribution_1.MenuModelRegistry),
    __metadata("design:type", contribution_1.MenuModelRegistry)
], UserFields.prototype, "menuRegistry", void 0);
UserFields = __decorate([
    (0, inversify_1.injectable)()
], UserFields);
exports.UserFields = UserFields;
//# sourceMappingURL=user-fields.js.map