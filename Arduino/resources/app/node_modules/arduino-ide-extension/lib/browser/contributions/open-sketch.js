"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var OpenSketch_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.promptMoveSketch = exports.OpenSketch = exports.SketchLocation = void 0;
const remote = require("@theia/core/electron-shared/@electron/remote");
const nls_1 = require("@theia/core/lib/common/nls");
const inversify_1 = require("@theia/core/shared/inversify");
const protocol_1 = require("../../common/protocol");
const arduino_menus_1 = require("../menu/arduino-menus");
const contribution_1 = require("./contribution");
var SketchLocation;
(function (SketchLocation) {
    function toUri(location) {
        if (typeof location === 'string') {
            return new contribution_1.URI(location);
        }
        else if (protocol_1.SketchRef.is(location)) {
            return toUri(location.uri);
        }
        else {
            return location;
        }
    }
    SketchLocation.toUri = toUri;
    function is(arg) {
        return typeof arg === 'string' || arg instanceof contribution_1.URI || protocol_1.SketchRef.is(arg);
    }
    SketchLocation.is = is;
})(SketchLocation = exports.SketchLocation || (exports.SketchLocation = {}));
let OpenSketch = OpenSketch_1 = class OpenSketch extends contribution_1.SketchContribution {
    registerCommands(registry) {
        registry.registerCommand(OpenSketch_1.Commands.OPEN_SKETCH, {
            execute: async (arg) => {
                const toOpen = !SketchLocation.is(arg)
                    ? await this.selectSketch()
                    : arg;
                if (toOpen) {
                    return this.openSketch(toOpen);
                }
            },
        });
    }
    registerMenus(registry) {
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.FILE__SKETCH_GROUP, {
            commandId: OpenSketch_1.Commands.OPEN_SKETCH.id,
            label: nls_1.nls.localize('vscode/workspaceActions/openFileFolder', 'Open...'),
            order: '1',
        });
    }
    registerKeybindings(registry) {
        registry.registerKeybinding({
            command: OpenSketch_1.Commands.OPEN_SKETCH.id,
            keybinding: 'CtrlCmd+O',
        });
    }
    async openSketch(toOpen) {
        if (!toOpen) {
            return;
        }
        const uri = SketchLocation.toUri(toOpen);
        try {
            await this.sketchService.loadSketch(uri.toString());
        }
        catch (err) {
            if (protocol_1.SketchesError.NotFound.is(err)) {
                this.messageService.error(err.message);
            }
            throw err;
        }
        this.workspaceService.open(uri);
    }
    async selectSketch() {
        const config = await this.configService.getConfiguration();
        const defaultPath = await this.fileService.fsPath(new contribution_1.URI(config.sketchDirUri));
        const { filePaths } = await remote.dialog.showOpenDialog(remote.getCurrentWindow(), {
            defaultPath,
            properties: ['createDirectory', 'openFile'],
            filters: [
                {
                    name: nls_1.nls.localize('arduino/sketch/sketch', 'Sketch'),
                    extensions: ['ino', 'pde'],
                },
            ],
        });
        if (!filePaths.length) {
            return undefined;
        }
        if (filePaths.length > 1) {
            this.logger.warn(`Multiple sketches were selected: ${filePaths}. Using the first one.`);
        }
        const sketchFilePath = filePaths[0];
        const sketchFileUri = await this.fileSystemExt.getUri(sketchFilePath);
        const sketch = await this.sketchService.getSketchFolder(sketchFileUri);
        if (sketch) {
            return sketch;
        }
        if (contribution_1.Sketch.isSketchFile(sketchFileUri)) {
            return promptMoveSketch(sketchFileUri, {
                fileService: this.fileService,
                sketchService: this.sketchService,
                labelProvider: this.labelProvider,
            });
        }
    }
};
OpenSketch = OpenSketch_1 = __decorate([
    (0, inversify_1.injectable)()
], OpenSketch);
exports.OpenSketch = OpenSketch;
(function (OpenSketch) {
    let Commands;
    (function (Commands) {
        Commands.OPEN_SKETCH = {
            id: 'arduino-open-sketch',
        };
    })(Commands = OpenSketch.Commands || (OpenSketch.Commands = {}));
})(OpenSketch = exports.OpenSketch || (exports.OpenSketch = {}));
exports.OpenSketch = OpenSketch;
async function promptMoveSketch(sketchFileUri, options) {
    const { fileService, sketchService, labelProvider } = options;
    const uri = sketchFileUri instanceof contribution_1.URI ? sketchFileUri : new contribution_1.URI(sketchFileUri);
    const name = uri.path.name;
    const nameWithExt = labelProvider.getName(uri);
    const { response } = await remote.dialog.showMessageBox({
        title: nls_1.nls.localize('arduino/sketch/moving', 'Moving'),
        type: 'question',
        buttons: [
            nls_1.nls.localize('vscode/issueMainService/cancel', 'Cancel'),
            nls_1.nls.localize('vscode/issueMainService/ok', 'OK'),
        ],
        message: nls_1.nls.localize('arduino/sketch/movingMsg', 'The file "{0}" needs to be inside a sketch folder named "{1}".\nCreate this folder, move the file, and continue?', nameWithExt, name),
    });
    if (response === 1) {
        // OK
        const newSketchUri = uri.parent.resolve(name);
        const exists = await fileService.exists(newSketchUri);
        if (exists) {
            await remote.dialog.showMessageBox({
                type: 'error',
                title: nls_1.nls.localize('vscode/dialog/dialogErrorMessage', 'Error'),
                message: nls_1.nls.localize('arduino/sketch/cantOpen', 'A folder named "{0}" already exists. Can\'t open sketch.', name),
            });
            return undefined;
        }
        await fileService.createFolder(newSketchUri);
        await fileService.move(uri, new contribution_1.URI(newSketchUri.resolve(nameWithExt).toString()));
        return sketchService.getSketchFolder(newSketchUri.toString());
    }
}
exports.promptMoveSketch = promptMoveSketch;
//# sourceMappingURL=open-sketch.js.map