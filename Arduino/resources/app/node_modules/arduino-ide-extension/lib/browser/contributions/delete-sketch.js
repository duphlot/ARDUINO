"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DeleteSketch_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteSketch = void 0;
const inversify_1 = require("@theia/core/shared/inversify");
const protocol_1 = require("../../common/protocol");
const contribution_1 = require("./contribution");
let DeleteSketch = DeleteSketch_1 = class DeleteSketch extends contribution_1.SketchContribution {
    registerCommands(registry) {
        registry.registerCommand(DeleteSketch_1.Commands.DELETE_SKETCH, {
            execute: (uri) => this.deleteSketch(uri),
        });
    }
    async deleteSketch(uri) {
        const sketch = await this.loadSketch(uri);
        if (!sketch) {
            console.info(`Sketch not found at ${uri}. Skipping deletion.`);
            return;
        }
        return this.sketchService.deleteSketch(sketch);
    }
    async loadSketch(uri) {
        try {
            const sketch = await this.sketchService.loadSketch(uri);
            return sketch;
        }
        catch (err) {
            if (protocol_1.SketchesError.NotFound.is(err)) {
                return undefined;
            }
            throw err;
        }
    }
};
DeleteSketch = DeleteSketch_1 = __decorate([
    (0, inversify_1.injectable)()
], DeleteSketch);
exports.DeleteSketch = DeleteSketch;
(function (DeleteSketch) {
    let Commands;
    (function (Commands) {
        Commands.DELETE_SKETCH = {
            id: 'arduino-delete-sketch',
        };
    })(Commands = DeleteSketch.Commands || (DeleteSketch.Commands = {}));
})(DeleteSketch = exports.DeleteSketch || (exports.DeleteSketch = {}));
exports.DeleteSketch = DeleteSketch;
//# sourceMappingURL=delete-sketch.js.map