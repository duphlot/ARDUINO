"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var InterfaceScale_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterfaceScale = void 0;
const inversify_1 = require("@theia/core/shared/inversify");
const contribution_1 = require("./contribution");
const arduino_menus_1 = require("../menu/arduino-menus");
const common_1 = require("@theia/core/lib/common");
const main_menu_manager_1 = require("../../common/main-menu-manager");
const debounce = require("lodash.debounce");
let InterfaceScale = InterfaceScale_1 = class InterfaceScale extends contribution_1.Contribution {
    constructor() {
        super(...arguments);
        this.menuActionsDisposables = new common_1.DisposableCollection();
        this.fontScalingEnabled = {
            increase: true,
            decrease: true,
        };
        this.updateSettingsDebounced = debounce(async () => {
            await this.settingsService.update(this.currentSettings);
            await this.settingsService.save();
        }, 100, { maxWait: 200 });
    }
    onStart() {
        const updateCurrent = (settings) => {
            this.currentSettings = settings;
            this.updateFontScalingEnabled();
        };
        this.settingsService.onDidChange((settings) => updateCurrent(settings));
        this.settingsService.settings().then((settings) => updateCurrent(settings));
    }
    registerCommands(registry) {
        registry.registerCommand(InterfaceScale_1.Commands.INCREASE_FONT_SIZE, {
            execute: () => this.updateFontSize('increase'),
            isEnabled: () => this.fontScalingEnabled.increase,
        });
        registry.registerCommand(InterfaceScale_1.Commands.DECREASE_FONT_SIZE, {
            execute: () => this.updateFontSize('decrease'),
            isEnabled: () => this.fontScalingEnabled.decrease,
        });
    }
    registerMenus(registry) {
        this.menuActionsDisposables.dispose();
        const increaseFontSizeMenuAction = {
            commandId: InterfaceScale_1.Commands.INCREASE_FONT_SIZE.id,
            label: common_1.nls.localize('arduino/editor/increaseFontSize', 'Increase Font Size'),
            order: '0',
        };
        const decreaseFontSizeMenuAction = {
            commandId: InterfaceScale_1.Commands.DECREASE_FONT_SIZE.id,
            label: common_1.nls.localize('arduino/editor/decreaseFontSize', 'Decrease Font Size'),
            order: '1',
        };
        if (this.fontScalingEnabled.increase) {
            this.menuActionsDisposables.push(registry.registerMenuAction(arduino_menus_1.ArduinoMenus.EDIT__FONT_CONTROL_GROUP, increaseFontSizeMenuAction));
        }
        else {
            this.menuActionsDisposables.push(registry.registerMenuNode(arduino_menus_1.ArduinoMenus.EDIT__FONT_CONTROL_GROUP, new arduino_menus_1.PlaceholderMenuNode(arduino_menus_1.ArduinoMenus.EDIT__FONT_CONTROL_GROUP, increaseFontSizeMenuAction.label, { order: increaseFontSizeMenuAction.order })));
        }
        if (this.fontScalingEnabled.decrease) {
            this.menuActionsDisposables.push(this.menuRegistry.registerMenuAction(arduino_menus_1.ArduinoMenus.EDIT__FONT_CONTROL_GROUP, decreaseFontSizeMenuAction));
        }
        else {
            this.menuActionsDisposables.push(this.menuRegistry.registerMenuNode(arduino_menus_1.ArduinoMenus.EDIT__FONT_CONTROL_GROUP, new arduino_menus_1.PlaceholderMenuNode(arduino_menus_1.ArduinoMenus.EDIT__FONT_CONTROL_GROUP, decreaseFontSizeMenuAction.label, { order: decreaseFontSizeMenuAction.order })));
        }
        this.mainMenuManager.update();
    }
    updateFontScalingEnabled() {
        let fontScalingEnabled = {
            increase: true,
            decrease: true,
        };
        if (this.currentSettings.autoScaleInterface) {
            fontScalingEnabled = {
                increase: this.currentSettings.interfaceScale + InterfaceScale_1.ZoomLevel.STEP <=
                    InterfaceScale_1.ZoomLevel.MAX,
                decrease: this.currentSettings.interfaceScale - InterfaceScale_1.ZoomLevel.STEP >=
                    InterfaceScale_1.ZoomLevel.MIN,
            };
        }
        else {
            fontScalingEnabled = {
                increase: this.currentSettings.editorFontSize + InterfaceScale_1.FontSize.STEP <=
                    InterfaceScale_1.FontSize.MAX,
                decrease: this.currentSettings.editorFontSize - InterfaceScale_1.FontSize.STEP >=
                    InterfaceScale_1.FontSize.MIN,
            };
        }
        const isChanged = Object.keys(fontScalingEnabled).some((key) => fontScalingEnabled[key] !== this.fontScalingEnabled[key]);
        if (isChanged) {
            this.fontScalingEnabled = fontScalingEnabled;
            this.registerMenus(this.menuRegistry);
        }
    }
    updateFontSize(mode) {
        if (this.currentSettings.autoScaleInterface) {
            mode === 'increase'
                ? (this.currentSettings.interfaceScale += InterfaceScale_1.ZoomLevel.STEP)
                : (this.currentSettings.interfaceScale -=
                    InterfaceScale_1.ZoomLevel.STEP);
        }
        else {
            mode === 'increase'
                ? (this.currentSettings.editorFontSize += InterfaceScale_1.FontSize.STEP)
                : (this.currentSettings.editorFontSize -= InterfaceScale_1.FontSize.STEP);
        }
        this.updateFontScalingEnabled();
        this.updateSettingsDebounced();
    }
    registerKeybindings(registry) {
        registry.registerKeybinding({
            command: InterfaceScale_1.Commands.INCREASE_FONT_SIZE.id,
            keybinding: 'CtrlCmd+=',
        });
        registry.registerKeybinding({
            command: InterfaceScale_1.Commands.DECREASE_FONT_SIZE.id,
            keybinding: 'CtrlCmd+-',
        });
    }
};
__decorate([
    (0, inversify_1.inject)(contribution_1.MenuModelRegistry),
    __metadata("design:type", contribution_1.MenuModelRegistry)
], InterfaceScale.prototype, "menuRegistry", void 0);
__decorate([
    (0, inversify_1.inject)(main_menu_manager_1.MainMenuManager),
    __metadata("design:type", Object)
], InterfaceScale.prototype, "mainMenuManager", void 0);
InterfaceScale = InterfaceScale_1 = __decorate([
    (0, inversify_1.injectable)()
], InterfaceScale);
exports.InterfaceScale = InterfaceScale;
(function (InterfaceScale) {
    let Commands;
    (function (Commands) {
        Commands.INCREASE_FONT_SIZE = {
            id: 'arduino-increase-font-size',
        };
        Commands.DECREASE_FONT_SIZE = {
            id: 'arduino-decrease-font-size',
        };
    })(Commands = InterfaceScale.Commands || (InterfaceScale.Commands = {}));
    let ZoomLevel;
    (function (ZoomLevel) {
        ZoomLevel.MIN = -8;
        ZoomLevel.MAX = 9;
        ZoomLevel.STEP = 1;
        function toPercentage(scale) {
            return scale * 20 + 100;
        }
        ZoomLevel.toPercentage = toPercentage;
        function fromPercentage(percentage) {
            return (percentage - 100) / 20;
        }
        ZoomLevel.fromPercentage = fromPercentage;
        let Step;
        (function (Step) {
            function toPercentage(step) {
                return step * 20;
            }
            Step.toPercentage = toPercentage;
            function fromPercentage(percentage) {
                return percentage / 20;
            }
            Step.fromPercentage = fromPercentage;
        })(Step = ZoomLevel.Step || (ZoomLevel.Step = {}));
    })(ZoomLevel = InterfaceScale.ZoomLevel || (InterfaceScale.ZoomLevel = {}));
    let FontSize;
    (function (FontSize) {
        FontSize.MIN = 8;
        FontSize.MAX = 72;
        FontSize.STEP = 2;
    })(FontSize = InterfaceScale.FontSize || (InterfaceScale.FontSize = {}));
})(InterfaceScale = exports.InterfaceScale || (exports.InterfaceScale = {}));
exports.InterfaceScale = InterfaceScale;
//# sourceMappingURL=interface-scale.js.map