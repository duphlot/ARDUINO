"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartupTasks = void 0;
const remote = require("@theia/core/electron-shared/@electron/remote");
const electron_1 = require("@theia/core/electron-shared/electron");
const inversify_1 = require("@theia/core/shared/inversify");
const startup_task_1 = require("../../electron-common/startup-task");
const contribution_1 = require("./contribution");
let StartupTasks = class StartupTasks extends contribution_1.Contribution {
    onReady() {
        electron_1.ipcRenderer.once(startup_task_1.StartupTask.Messaging.STARTUP_TASKS_SIGNAL, (_, args) => {
            console.debug(`Received the startup tasks from the electron main process. Args: ${JSON.stringify(args)}`);
            if (!startup_task_1.StartupTask.has(args)) {
                console.warn(`Could not detect 'tasks' from the signal. Skipping.`);
                return;
            }
            const tasks = args.tasks;
            if (tasks.length) {
                console.log(`Executing startup tasks:`);
                tasks.forEach(({ command, args = [] }) => {
                    console.log(` - '${command}' ${args.length ? `, args: ${JSON.stringify(args)}` : ''}`);
                    this.commandService
                        .executeCommand(command, ...args)
                        .catch((err) => console.error(`Error occurred when executing the startup task '${command}'${(args === null || args === void 0 ? void 0 : args.length) ? ` with args: '${JSON.stringify(args)}` : ''}.`, err));
                });
            }
        });
        const { id } = remote.getCurrentWindow();
        console.debug(`Signalling app ready event to the electron main process. Sender ID: ${id}.`);
        electron_1.ipcRenderer.send(startup_task_1.StartupTask.Messaging.APP_READY_SIGNAL(id));
    }
};
StartupTasks = __decorate([
    (0, inversify_1.injectable)()
], StartupTasks);
exports.StartupTasks = StartupTasks;
//# sourceMappingURL=startup-task.js.map