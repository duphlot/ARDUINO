"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var OpenBoardsConfig_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenBoardsConfig = void 0;
const inversify_1 = require("@theia/core/shared/inversify");
const boards_config_dialog_1 = require("../boards/boards-config-dialog");
const boards_service_provider_1 = require("../boards/boards-service-provider");
const contribution_1 = require("./contribution");
let OpenBoardsConfig = OpenBoardsConfig_1 = class OpenBoardsConfig extends contribution_1.Contribution {
    registerCommands(registry) {
        registry.registerCommand(OpenBoardsConfig_1.Commands.OPEN_DIALOG, {
            execute: async (query) => {
                const boardsConfig = await this.boardsConfigDialog.open(query);
                if (boardsConfig) {
                    return (this.boardsServiceProvider.boardsConfig = boardsConfig);
                }
            },
        });
    }
};
__decorate([
    (0, inversify_1.inject)(boards_service_provider_1.BoardsServiceProvider),
    __metadata("design:type", boards_service_provider_1.BoardsServiceProvider)
], OpenBoardsConfig.prototype, "boardsServiceProvider", void 0);
__decorate([
    (0, inversify_1.inject)(boards_config_dialog_1.BoardsConfigDialog),
    __metadata("design:type", boards_config_dialog_1.BoardsConfigDialog)
], OpenBoardsConfig.prototype, "boardsConfigDialog", void 0);
OpenBoardsConfig = OpenBoardsConfig_1 = __decorate([
    (0, inversify_1.injectable)()
], OpenBoardsConfig);
exports.OpenBoardsConfig = OpenBoardsConfig;
(function (OpenBoardsConfig) {
    let Commands;
    (function (Commands) {
        Commands.OPEN_DIALOG = {
            id: 'arduino-open-boards-dialog',
        };
    })(Commands = OpenBoardsConfig.Commands || (OpenBoardsConfig.Commands = {}));
})(OpenBoardsConfig = exports.OpenBoardsConfig || (exports.OpenBoardsConfig = {}));
exports.OpenBoardsConfig = OpenBoardsConfig;
//# sourceMappingURL=open-boards-config.js.map