"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BoardsListWidgetFrontendContribution = void 0;
const inversify_1 = require("@theia/core/shared/inversify");
const boards_service_1 = require("../../common/protocol/boards-service");
const list_widget_frontend_contribution_1 = require("../widgets/component-list/list-widget-frontend-contribution");
const boards_list_widget_1 = require("./boards-list-widget");
let BoardsListWidgetFrontendContribution = class BoardsListWidgetFrontendContribution extends list_widget_frontend_contribution_1.ListWidgetFrontendContribution {
    constructor() {
        super({
            widgetId: boards_list_widget_1.BoardsListWidget.WIDGET_ID,
            widgetName: boards_list_widget_1.BoardsListWidget.WIDGET_LABEL,
            defaultWidgetOptions: {
                area: 'left',
                rank: 2,
            },
            toggleCommandId: `${boards_list_widget_1.BoardsListWidget.WIDGET_ID}:toggle`,
            toggleKeybinding: 'CtrlCmd+Shift+B',
        });
    }
    canParse(uri) {
        try {
            boards_service_1.BoardSearch.UriParser.parse(uri);
            return true;
        }
        catch (_a) {
            return false;
        }
    }
    parse(uri) {
        return boards_service_1.BoardSearch.UriParser.parse(uri);
    }
};
BoardsListWidgetFrontendContribution = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [])
], BoardsListWidgetFrontendContribution);
exports.BoardsListWidgetFrontendContribution = BoardsListWidgetFrontendContribution;
//# sourceMappingURL=boards-widget-frontend-contribution.js.map