"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeymapsFrontendContribution = void 0;
const inversify_1 = require("@theia/core/shared/inversify");
const keymaps_frontend_contribution_1 = require("@theia/keymaps/lib/browser/keymaps-frontend-contribution");
const arduino_menus_1 = require("../../menu/arduino-menus");
const common_1 = require("@theia/core/lib/common");
let KeymapsFrontendContribution = class KeymapsFrontendContribution extends keymaps_frontend_contribution_1.KeymapsFrontendContribution {
    registerMenus(menus) {
        menus.registerMenuAction(arduino_menus_1.ArduinoMenus.FILE__ADVANCED_SUBMENU, {
            commandId: keymaps_frontend_contribution_1.KeymapsCommands.OPEN_KEYMAPS.id,
            label: common_1.nls.localize('vscode/helpActions/miKeyboardShortcuts', 'Keyboard Shortcuts'),
            order: '1',
        });
    }
};
KeymapsFrontendContribution = __decorate([
    (0, inversify_1.injectable)()
], KeymapsFrontendContribution);
exports.KeymapsFrontendContribution = KeymapsFrontendContribution;
//# sourceMappingURL=keymaps-frontend-contribution.js.map