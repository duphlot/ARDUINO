"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonacoFormattingConflictsContribution = void 0;
const inversify_1 = require("@theia/core/shared/inversify");
const monaco_formatting_conflicts_1 = require("@theia/monaco/lib/browser/monaco-formatting-conflicts");
let MonacoFormattingConflictsContribution = class MonacoFormattingConflictsContribution extends monaco_formatting_conflicts_1.MonacoFormattingConflictsContribution {
    async initialize() {
        // NOOP - does not register a custom formatting conflicts selects.
        // Does not get and set formatter preferences when selecting from multiple formatters.
        // Does not show quick-pick input when multiple formatters are available for the text model.
        // Uses the default behavior from VS Code: https://github.com/microsoft/vscode/blob/fb9f488e51af2e2efe95a34f24ca11e1b2a3f744/src/vs/editor/editor.api.ts#L19-L21
    }
};
MonacoFormattingConflictsContribution = __decorate([
    (0, inversify_1.injectable)()
], MonacoFormattingConflictsContribution);
exports.MonacoFormattingConflictsContribution = MonacoFormattingConflictsContribution;
//# sourceMappingURL=monaco-formatting-conflicts.js.map