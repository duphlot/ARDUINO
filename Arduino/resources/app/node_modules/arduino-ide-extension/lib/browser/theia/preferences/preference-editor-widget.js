"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreferencesEditorWidget = void 0;
const inversify_1 = require("@theia/core/shared/inversify");
const preference_editor_widget_1 = require("@theia/preferences/lib/browser/views/preference-editor-widget");
let PreferencesEditorWidget = class PreferencesEditorWidget extends preference_editor_widget_1.PreferencesEditorWidget {
    resetScroll(nodeIDToScrollTo, filterWasCleared = false) {
        if (this.scrollBar) {
            // Absent on widget creation
            this.doResetScroll(nodeIDToScrollTo, filterWasCleared);
        }
        else {
            // NOOP
            // Unlike Theia, IDE2 does not start multiple tasks to check if the scrollbar is ready to reset it.
            // If the "scroll reset" request arrived before the existence of the scrollbar, what to reset?
        }
    }
};
PreferencesEditorWidget = __decorate([
    (0, inversify_1.injectable)()
], PreferencesEditorWidget);
exports.PreferencesEditorWidget = PreferencesEditorWidget;
//# sourceMappingURL=preference-editor-widget.js.map