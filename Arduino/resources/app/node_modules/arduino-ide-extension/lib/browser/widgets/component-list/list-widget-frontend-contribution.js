"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListWidgetFrontendContribution = void 0;
const view_contribution_1 = require("@theia/core/lib/browser/shell/view-contribution");
const inversify_1 = require("@theia/core/shared/inversify");
let ListWidgetFrontendContribution = class ListWidgetFrontendContribution extends view_contribution_1.AbstractViewContribution {
    constructor() {
        super(...arguments);
        this.id = `http-opener-${this.viewId}`;
    }
    async initializeLayout() {
        this.openView();
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    registerMenus(_) {
        // NOOP
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    canHandle(uri, _) {
        // `500` is the default HTTP opener in Theia. IDE2 has higher priority.
        // https://github.com/eclipse-theia/theia/blob/b75b6144b0ffea06a549294903c374fa642135e4/packages/core/src/browser/http-open-handler.ts#L39
        return this.canParse(uri) ? 501 : 0;
    }
    async open(uri, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _) {
        const searchOptions = this.parse(uri);
        if (!searchOptions) {
            console.warn(`Failed to parse URI into a search options. URI: ${uri.toString()}`);
            return;
        }
        const widget = await this.openView({
            activate: true,
            reveal: true,
        });
        if (!widget) {
            console.warn(`Failed to open view for URI: ${uri.toString()}`);
            return;
        }
        widget.refresh(searchOptions);
    }
};
ListWidgetFrontendContribution = __decorate([
    (0, inversify_1.injectable)()
], ListWidgetFrontendContribution);
exports.ListWidgetFrontendContribution = ListWidgetFrontendContribution;
//# sourceMappingURL=list-widget-frontend-contribution.js.map