"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElectronMainWindowServiceImpl = void 0;
const electron_main_window_service_impl_1 = require("@theia/core/lib/electron-main/electron-main-window-service-impl");
const inversify_1 = require("@theia/core/shared/inversify");
const startup_task_1 = require("../../electron-common/startup-task");
const electron_main_application_1 = require("./electron-main-application");
const window_1 = require("./window");
let ElectronMainWindowServiceImpl = class ElectronMainWindowServiceImpl extends electron_main_window_service_impl_1.ElectronMainWindowServiceImpl {
    async isFirstWindow(windowId) {
        return this.app.firstWindowId === windowId;
    }
    openNewWindow(url, options) {
        // External window has highest precedence.
        if (options === null || options === void 0 ? void 0 : options.external) {
            return super.openNewWindow(url, options);
        }
        // Look for existing window with the same URL and focus it.
        const existing = this.app.browserWindows.find(({ webContents }) => webContents.getURL() === url);
        if (existing) {
            existing.focus();
            return undefined;
        }
        // Create new window and share the startup tasks.
        if (startup_task_1.StartupTask.has(options)) {
            const { tasks } = options;
            this.app.createWindow().then((electronWindow) => {
                this.loadURL(electronWindow, url).then(() => {
                    electronWindow.webContents.send(startup_task_1.StartupTask.Messaging.STARTUP_TASKS_SIGNAL, { tasks });
                });
            });
            return undefined;
        }
        // Default.
        return super.openNewWindow(url, options);
    }
    loadURL(electronWindow, url) {
        return (0, window_1.load)(electronWindow, (electronWindow) => electronWindow.loadURL(url));
    }
};
__decorate([
    (0, inversify_1.inject)(electron_main_application_1.ElectronMainApplication),
    __metadata("design:type", electron_main_application_1.ElectronMainApplication)
], ElectronMainWindowServiceImpl.prototype, "app", void 0);
ElectronMainWindowServiceImpl = __decorate([
    (0, inversify_1.injectable)()
], ElectronMainWindowServiceImpl);
exports.ElectronMainWindowServiceImpl = ElectronMainWindowServiceImpl;
//# sourceMappingURL=electron-main-window-service.js.map